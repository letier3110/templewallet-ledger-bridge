{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/client.ts"],"sourcesContent":["export type BridgeRequest = BridgeExchangeRequest;\n\nexport type BridgeResponse = BridgeExchangeResponse | BridgeErrorResponse;\n\nexport interface BridgeExchangeRequest extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeRequest;\n  apdu: string;\n  scrambleKey?: string;\n  exchangeTimeout?: number;\n}\n\nexport interface BridgeExchangeResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeResponse;\n  result: string;\n}\n\nexport interface BridgeErrorResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ErrorResponse;\n  message: string;\n}\n\nexport interface BridgeMessageBase {\n  type: BridgeMessageType;\n}\n\nexport enum BridgeMessageType {\n  ExchangeRequest = \"THANOS_LEDGER_BRIDGE_EXCHANGE_REQUEST\",\n  ExchangeResponse = \"THANOS_LEDGER_BRIDGE_EXCHANGE_RESPONSE\",\n  ErrorResponse = \"THANOS_LEDGER_ERROR_RESPONSE\",\n}\n","import Transport from \"@ledgerhq/hw-transport\";\nimport {\n  BridgeExchangeRequest,\n  BridgeMessageType,\n  BridgeResponse,\n} from \"./types\";\n\nexport class LedgerThanosBridgeTransport extends Transport {\n  static async isSupported() {\n    return true;\n  }\n\n  // this transport is not discoverable\n  static async list() {\n    return [];\n  }\n\n  // this transport is not discoverable\n  static listen() {\n    return {\n      unsubscribe: () => {},\n    };\n  }\n\n  static async open(bridgeUrl: string) {\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = bridgeUrl;\n    document.head.appendChild(iframe);\n    await new Promise((res) => {\n      const handleLoad = () => {\n        res();\n        iframe.removeEventListener(\"load\", handleLoad);\n      };\n      iframe.addEventListener(\"load\", handleLoad);\n    });\n    return new LedgerThanosBridgeTransport(iframe);\n  }\n\n  scrambleKey?: Buffer;\n\n  constructor(private iframe: HTMLIFrameElement) {\n    super();\n  }\n\n  get origin() {\n    const tmp = this.iframe.src.split(\"/\");\n    tmp.splice(-1, 1);\n    return tmp.join(\"/\");\n  }\n\n  exchange(apdu: Buffer) {\n    return new Promise<Buffer>(async (resolve, reject) => {\n      const exchangeTimeout: number = (this as any).exchangeTimeout;\n      const msg: BridgeExchangeRequest = {\n        type: BridgeMessageType.ExchangeRequest,\n        apdu: apdu.toString(\"hex\"),\n        scrambleKey: this.scrambleKey?.toString(\"ascii\"),\n        exchangeTimeout,\n      };\n\n      this.iframe.contentWindow?.postMessage(msg, \"*\");\n\n      const handleMessage = (evt: MessageEvent) => {\n        if (evt.origin !== this.origin) {\n          return;\n        }\n\n        const res: BridgeResponse = evt.data;\n        switch (res?.type) {\n          case BridgeMessageType.ExchangeResponse:\n            resolve(Buffer.from(res.result, \"hex\"));\n            break;\n\n          case BridgeMessageType.ErrorResponse:\n            reject(res.message);\n            break;\n        }\n\n        window.removeEventListener(\"message\", handleMessage);\n      };\n\n      window.addEventListener(\"message\", handleMessage);\n    });\n  }\n\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  async close() {\n    document.head.removeChild(this.iframe);\n  }\n}\n"],"names":["BridgeMessageType","iframe","_this","LedgerThanosBridgeTransport","isSupported","list","listen","unsubscribe","open","bridgeUrl","document","createElement","src","head","appendChild","Promise","res","addEventListener","handleLoad","removeEventListener","exchange","apdu","this","resolve","reject","exchangeTimeout","_this2","msg","type","ExchangeRequest","toString","scrambleKey","_this2$scrambleKey","contentWindow","postMessage","window","handleMessage","evt","origin","data","ExchangeResponse","Buffer","from","result","ErrorResponse","message","setScrambleKey","close","removeChild","tmp","split","splice","join","Transport"],"mappings":"2QAyBA,IAAYA,sEAAAA,EAAAA,sBAAAA,iFAEVA,4DACAA,iGCYA,WAAoBC,gBAClBC,6BADkBD,2FAjCtBE,EACeC,uBACX,wBAAO,MAIIC,gBACX,uBAAO,OAIFC,OAAP,WACE,MAAO,CACLC,YAAa,iBAIJC,cAAKC,OAChB,IAAMR,EAASS,SAASC,cAAc,iBACtCV,EAAOW,IAAMH,EACbC,SAASG,KAAKC,YAAYb,mBACpB,IAAIc,QAAQ,SAACC,GAKjBf,EAAOgB,iBAAiB,OAJL,SAAbC,IACJF,IACAf,EAAOkB,oBAAoB,OAAQD,wBAIvC,WAAWf,EAA4BF,KA5B3C,iEA2CEmB,SAAA,SAASC,SAE4BC,KADnC,WAAWP,iBAAuBQ,EAASC,eACnCC,EAA2BC,EAAaD,gBACxCE,EAA6B,CACjCC,KAAM5B,oBAAkB6B,gBACxBR,KAAMA,EAAKS,SAAS,OACpBC,sBAAaL,EAAKK,gCAALC,EAAkBF,SAAS,SACxCL,gBAAAA,sBAGGxB,OAAOgC,8BAAeC,YAAYP,EAAK,KAqB5CQ,OAAOlB,iBAAiB,UAnBF,SAAhBmB,EAAiBC,GACrB,GAAIA,EAAIC,SAAWZ,EAAKY,OAAxB,CAIA,IAAMtB,EAAsBqB,EAAIE,KAChC,OAAQvB,MAAAA,SAAAA,EAAKY,MACX,KAAK5B,oBAAkBwC,iBACrBjB,EAAQkB,OAAOC,KAAK1B,EAAI2B,OAAQ,QAChC,MAEF,KAAK3C,oBAAkB4C,cACrBpB,EAAOR,EAAI6B,SAIfV,OAAOhB,oBAAoB,UAAWiB,wBA3BnC,wCAkCTU,eAAA,SAAef,GACbT,KAAKS,YAAcU,OAAOC,KAAKX,EAAa,YAGxCgB,4BACJrC,SAASG,KAAKmC,YAAY1B,KAAKrB,0BAnFnC,qEAsCI,IAAMgD,EAAM3B,KAAKrB,OAAOW,IAAIsC,MAAM,KAElC,OADAD,EAAIE,QAAQ,EAAG,GACRF,EAAIG,KAAK,iMAxC6BC"}