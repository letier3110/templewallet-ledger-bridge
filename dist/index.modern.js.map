{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/client.ts"],"sourcesContent":["export type BridgeRequest = BridgeExchangeRequest;\n\nexport type BridgeResponse = BridgeExchangeResponse | BridgeErrorResponse;\n\nexport interface BridgeExchangeRequest extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeRequest;\n  apdu: string;\n  scrambleKey?: string;\n  exchangeTimeout?: number;\n}\n\nexport interface BridgeExchangeResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeResponse;\n  result: string;\n}\n\nexport interface BridgeErrorResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ErrorResponse;\n  message: string;\n}\n\nexport interface BridgeMessageBase {\n  type: BridgeMessageType;\n}\n\nexport enum BridgeMessageType {\n  ExchangeRequest = \"THANOS_LEDGER_BRIDGE_EXCHANGE_REQUEST\",\n  ExchangeResponse = \"THANOS_LEDGER_BRIDGE_EXCHANGE_RESPONSE\",\n  ErrorResponse = \"THANOS_LEDGER_ERROR_RESPONSE\",\n}\n","import Transport from \"@ledgerhq/hw-transport\";\nimport {\n  BridgeExchangeRequest,\n  BridgeMessageType,\n  BridgeResponse,\n} from \"./types\";\n\nexport class LedgerThanosBridgeTransport extends Transport {\n  static async isSupported() {\n    return true;\n  }\n\n  // this transport is not discoverable\n  static async list() {\n    return [];\n  }\n\n  // this transport is not discoverable\n  static listen() {\n    return {\n      unsubscribe: () => {},\n    };\n  }\n\n  static async open(bridgeUrl: string) {\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = bridgeUrl;\n    document.head.appendChild(iframe);\n    await new Promise((res) => {\n      const handleLoad = () => {\n        res();\n        iframe.removeEventListener(\"load\", handleLoad);\n      };\n      iframe.addEventListener(\"load\", handleLoad);\n    });\n    return new LedgerThanosBridgeTransport(iframe);\n  }\n\n  scrambleKey?: Buffer;\n\n  constructor(private iframe: HTMLIFrameElement) {\n    super();\n  }\n\n  get origin() {\n    const tmp = this.iframe.src.split(\"/\");\n    tmp.splice(-1, 1);\n    return tmp.join(\"/\");\n  }\n\n  exchange(apdu: Buffer) {\n    return new Promise<Buffer>(async (resolve, reject) => {\n      const exchangeTimeout: number = (this as any).exchangeTimeout;\n      const msg: BridgeExchangeRequest = {\n        type: BridgeMessageType.ExchangeRequest,\n        apdu: apdu.toString(\"hex\"),\n        scrambleKey: this.scrambleKey?.toString(\"ascii\"),\n        exchangeTimeout,\n      };\n\n      this.iframe.contentWindow?.postMessage(msg, \"*\");\n\n      const handleMessage = (evt: MessageEvent) => {\n        if (evt.origin !== this.origin) {\n          return;\n        }\n\n        const res: BridgeResponse = evt.data;\n        switch (res?.type) {\n          case BridgeMessageType.ExchangeResponse:\n            resolve(Buffer.from(res.result, \"hex\"));\n            break;\n\n          case BridgeMessageType.ErrorResponse:\n            reject(res.message);\n            break;\n        }\n\n        window.removeEventListener(\"message\", handleMessage);\n      };\n\n      window.addEventListener(\"message\", handleMessage);\n    });\n  }\n\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  async close() {\n    document.head.removeChild(this.iframe);\n  }\n}\n"],"names":["BridgeMessageType","LedgerThanosBridgeTransport","Transport","constructor","iframe","super","this","[object Object]","unsubscribe","bridgeUrl","document","createElement","src","head","appendChild","Promise","res","handleLoad","removeEventListener","addEventListener","origin","tmp","split","splice","join","exchange","apdu","async","resolve","reject","exchangeTimeout","_this","msg","type","ExchangeRequest","toString","scrambleKey","_this$scrambleKey","contentWindow","postMessage","handleMessage","evt","data","ExchangeResponse","Buffer","from","result","ErrorResponse","message","window","setScrambleKey","removeChild"],"mappings":"sCAyBYA,IAAAA,GAAZ,SAAYA,GACVA,0DACAA,4DACAA,+CAHF,CAAYA,IAAAA,aClBCC,UAAoCC,EAiC/CC,YAAoBC,GAClBC,QADkBC,YAAAF,EAhCpBG,2BACE,SAIFA,oBACE,MAAO,GAITA,gBACE,MAAO,CACLC,YAAa,QAIjBD,kBAAkBE,GAChB,MAAML,EAASM,SAASC,cAAc,UAUtC,OATAP,EAAOQ,IAAMH,EACbC,SAASG,KAAKC,YAAYV,aAChBW,QAASC,IACjB,MAAMC,EAAa,KACjBD,IACAZ,EAAOc,oBAAoB,OAAQD,IAErCb,EAAOe,iBAAiB,OAAQF,SAEvBhB,EAA4BG,GASzCgB,aACE,MAAMC,EAAMf,KAAKF,OAAOQ,IAAIU,MAAM,KAElC,OADAD,EAAIE,QAAQ,EAAG,GACRF,EAAIG,KAAK,KAGlBC,SAASC,cACP,WAAWX,QAAgBY,eAAOC,EAASC,WACzC,MAAMC,EAA2BC,EAAaD,gBACxCE,EAA6B,CACjCC,KAAMjC,EAAkBkC,gBACxBR,KAAMA,EAAKS,SAAS,OACpBC,sBAAaL,EAAKK,gCAALC,EAAkBF,SAAS,SACxCL,gBAAAA,aAGFC,EAAK3B,OAAOkC,8BAAeC,YAAYP,EAAK,KAE5C,MAAMQ,EAAiBC,IACrB,GAAIA,EAAIrB,SAAWW,EAAKX,OACtB,OAGF,MAAMJ,EAAsByB,EAAIC,KAChC,OAAQ1B,MAAAA,SAAAA,EAAKiB,MACX,KAAKjC,EAAkB2C,iBACrBf,EAAQgB,OAAOC,KAAK7B,EAAI8B,OAAQ,QAChC,MAEF,KAAK9C,EAAkB+C,cACrBlB,EAAOb,EAAIgC,SAIfC,OAAO/B,oBAAoB,UAAWsB,IAGxCS,OAAO9B,iBAAiB,UAAWqB,KAIvCU,eAAed,GACb9B,KAAK8B,YAAcQ,OAAOC,KAAKT,EAAa,SAG9C7B,cACEG,SAASG,KAAKsC,YAAY7C,KAAKF"}