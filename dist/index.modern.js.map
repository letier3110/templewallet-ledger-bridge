{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/client.ts"],"sourcesContent":["export type BridgeRequest = BridgeExchangeRequest;\n\nexport type BridgeResponse = BridgeExchangeResponse | BridgeErrorResponse;\n\nexport interface BridgeExchangeRequest extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeRequest;\n  apdu: string;\n  scrambleKey?: string;\n  exchangeTimeout?: number;\n}\n\nexport interface BridgeExchangeResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ExchangeResponse;\n  result: string;\n}\n\nexport interface BridgeErrorResponse extends BridgeMessageBase {\n  type: BridgeMessageType.ErrorResponse;\n  message: string;\n}\n\nexport interface BridgeMessageBase {\n  type: BridgeMessageType;\n}\n\nexport enum BridgeMessageType {\n  ExchangeRequest = \"THANOS_LEDGER_BRIDGE_EXCHANGE_REQUEST\",\n  ExchangeResponse = \"THANOS_LEDGER_BRIDGE_EXCHANGE_RESPONSE\",\n  ErrorResponse = \"THANOS_LEDGER_ERROR_RESPONSE\",\n}\n","import Transport from \"@ledgerhq/hw-transport\";\nimport {\n  BridgeExchangeRequest,\n  BridgeMessageType,\n  BridgeResponse,\n} from \"./types\";\n\nexport class LedgerThanosBridgeTransport extends Transport {\n  static async isSupported() {\n    return true;\n  }\n\n  // this transport is not discoverable\n  static async list() {\n    return [];\n  }\n\n  // this transport is not discoverable\n  static listen() {\n    return {\n      unsubscribe: () => {},\n    };\n  }\n\n  static async open() {\n    const bridgeUrl = \"https://thanoswallet.com/ledger-bridge\";\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = bridgeUrl;\n    document.head.appendChild(iframe);\n    return new LedgerThanosBridgeTransport(iframe, bridgeUrl);\n  }\n\n  scrambleKey?: Buffer;\n  unwrap?: boolean;\n\n  constructor(private iframe: HTMLIFrameElement, private bridgeUrl: string) {\n    super();\n  }\n\n  exchange(apdu: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      const msg: BridgeExchangeRequest = {\n        type: BridgeMessageType.ExchangeRequest,\n        apdu: apdu.toString(),\n        scrambleKey: this.scrambleKey?.toString(),\n        exchangeTimeout: (this as any).exchangeTimeout,\n      };\n      this.iframe.contentWindow?.postMessage(msg, \"*\");\n\n      const handleMessage = (evt: MessageEvent) => {\n        if (evt.origin !== this.getOrigin()) {\n          return;\n        }\n\n        const res: BridgeResponse = evt.data;\n        switch (res?.type) {\n          case BridgeMessageType.ExchangeResponse:\n            resolve(Buffer.from(res.result));\n            break;\n\n          case BridgeMessageType.ErrorResponse:\n            reject(res.message);\n            break;\n        }\n\n        window.removeEventListener(\"message\", handleMessage);\n      };\n\n      window.addEventListener(\"message\", handleMessage);\n    });\n  }\n\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  setUnwrap(unwrap: boolean) {\n    this.unwrap = unwrap;\n  }\n\n  async close() {\n    document.head.removeChild(this.iframe);\n  }\n\n  private getOrigin() {\n    const tmp = this.bridgeUrl.split(\"/\");\n    tmp.splice(-1, 1);\n    return tmp.join(\"/\");\n  }\n}\n"],"names":["BridgeMessageType","LedgerThanosBridgeTransport","Transport","constructor","iframe","bridgeUrl","super","this","[object Object]","unsubscribe","document","createElement","src","head","appendChild","exchange","apdu","Promise","resolve","reject","msg","type","ExchangeRequest","toString","scrambleKey","_this$scrambleKey","exchangeTimeout","contentWindow","postMessage","handleMessage","evt","origin","getOrigin","res","data","ExchangeResponse","Buffer","from","result","ErrorResponse","message","window","removeEventListener","addEventListener","setScrambleKey","setUnwrap","unwrap","removeChild","tmp","split","splice","join"],"mappings":"sCAyBYA,IAAAA,GAAZ,SAAYA,GACVA,0DACAA,4DACAA,+CAHF,CAAYA,IAAAA,aClBCC,UAAoCC,EA4B/CC,YAAoBC,EAAmCC,GACrDC,QADkBC,YAAAH,EAAmCG,eAAAF,EA3BvDG,2BACE,SAIFA,oBACE,MAAO,GAITA,gBACE,MAAO,CACLC,YAAa,QAIjBD,oBACE,MAAMH,EAAY,yCACZD,EAASM,SAASC,cAAc,UAGtC,OAFAP,EAAOQ,IAAMP,EACbK,SAASG,KAAKC,YAAYV,OACfH,EAA4BG,EAAQC,GAUjDU,SAASC,GACP,WAAWC,QAAgB,CAACC,EAASC,aACnC,MAAMC,EAA6B,CACjCC,KAAMrB,EAAkBsB,gBACxBN,KAAMA,EAAKO,WACXC,sBAAajB,KAAKiB,gCAALC,EAAkBF,WAC/BG,gBAAkBnB,KAAamB,gCAE5BtB,OAAOuB,8BAAeC,YAAYR,EAAK,KAE5C,MAAMS,EAAiBC,IACrB,GAAIA,EAAIC,SAAWxB,KAAKyB,YACtB,OAGF,MAAMC,EAAsBH,EAAII,KAChC,OAAQD,MAAAA,SAAAA,EAAKZ,MACX,KAAKrB,EAAkBmC,iBACrBjB,EAAQkB,OAAOC,KAAKJ,EAAIK,SACxB,MAEF,KAAKtC,EAAkBuC,cACrBpB,EAAOc,EAAIO,SAIfC,OAAOC,oBAAoB,UAAWb,IAGxCY,OAAOE,iBAAiB,UAAWd,KAIvCe,eAAepB,GACbjB,KAAKiB,YAAcY,OAAOC,KAAKb,EAAa,SAG9CqB,UAAUC,GACRvC,KAAKuC,OAASA,EAGhBtC,cACEE,SAASG,KAAKkC,YAAYxC,KAAKH,QAGzB4B,YACN,MAAMgB,EAAMzC,KAAKF,UAAU4C,MAAM,KAEjC,OADAD,EAAIE,QAAQ,EAAG,GACRF,EAAIG,KAAK"}